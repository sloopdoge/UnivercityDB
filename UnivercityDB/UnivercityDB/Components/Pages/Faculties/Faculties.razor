@page "/faculties"
@rendermode @(new InteractiveServerRenderMode(prerender: true))
@attribute [StreamRendering(true)]
@inject IFacultyService FacultyService
@inject IGroupService GroupService
@inject DialogService DialogService

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap" JustifyContent="JustifyContent.SpaceBetween">
    <RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1">Faculties</RadzenText>
    <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" Click="() => OpenFacultyDialog(null)"/>
</RadzenStack>


@if (faculties == null)
{
    <span>Loading...</span>
}
else if (faculties.Count == 0)
{
    <span>No faculties found</span>
}
else
{
    <RadzenDataGrid Data="@faculties" TItem="Faculty" ColumnWidth="700px">
        <Columns>
            <RadzenDataGridColumn TItem="Faculty" Property="FacultyID" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Start" />
            <RadzenDataGridColumn TItem="Faculty" Property="Title" Title="Title" Frozen="true" Width="200px" TextAlign="TextAlign.Start" />
@*             <RadzenDataGridColumn TItem="Faculty" Title="Chairs" Frozen="true" Width="200px" TextAlign="TextAlign.Start">
                <Template Context="faculty">
                    @if (faculty.Chairs is not null)
                    {
                        @foreach (var chair in faculty.Chairs)
                        {
                            <RadzenText>•@chair</RadzenText>
                        }
                    }
                </Template>
            </RadzenDataGridColumn> *@
            <RadzenDataGridColumn TItem="Faculty" Property="Note" Title="Note" Frozen="true" Width="300px" TextAlign="TextAlign.Start" />
            <RadzenDataGridColumn TItem="Faculty" Property="FacultyID" Title="Action" Width="100px" TextAlign="TextAlign.Center">
                <Template Context="faculty">
                    <RadzenButton Text="Update" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Click="() => OpenFacultyDialog(faculty.FacultyID)" />
                    <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Click="() => OpenDeleteAlert(faculty)" />
                    <RadzenButton Text="Diagram" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" Click="() => OpenLineChrt(faculty)" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private List<Faculty> faculties { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        faculties = await FacultyService.GetFaculties();
        await GroupService.GetGroups();
    }

    private async Task OpenFacultyDialog(int? id) =>
        await DialogService.OpenAsync<FacultyDetailsPage>("Faculty Details",
            new Dictionary<string, object> { { "id", id } },
            new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });

    private async Task OpenDeleteAlert(Faculty faculty) =>
        await DialogService.OpenAsync<FacultyDeleteAlert>($"Are you sure to delete {faculty.Title}?",
            new Dictionary<string, object> {
                { "facultyToDelete", faculty }
                },
            new DialogOptions() { Width = "450px", Height = "300px", Resizable = true, Draggable = true });

    private async Task OpenLineChrt(Faculty faculty) =>
        await DialogService.OpenAsync<FacultyGroupsLineChart>($"Average students marks by groups in {faculty.Title}",
            new Dictionary<string, object> {
                { "faculty", faculty }
                    },
            new DialogOptions() { Width = "1000px", Height = "500px", Resizable = true, Draggable = true });
}
