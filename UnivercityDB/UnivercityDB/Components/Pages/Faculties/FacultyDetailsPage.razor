@rendermode @(new InteractiveServerRenderMode(prerender: true))
@attribute [StreamRendering(true)]
@inject IFacultyService FacultyService
@inject DialogService DialogService

@if (id == null)
{
    <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Start">Create new faculty</RadzenText>
}
else
{
    <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Start">Edit @faculty.Title</RadzenText>
}
<RadzenTemplateForm TItem="Faculty" Data=@faculty Submit=@HandleSubmit>
    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="5">
        <RadzenCard>
           <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="3">
               <RadzenFormField Text="Title">
                   <RadzenTextBox Name="Title" @bind-Value="@faculty.Title"/>
                   <RadzenRequiredValidator Component="Title" Text="Title is requred" Popup=@true Style="position: absolute"/>
               </RadzenFormField>
           </RadzenStack>
        </RadzenCard>
        <RadzenCard>
            <RadzenText Text="Chairs"/>
            <RadzenStack Orientation="Orientation.Vertical" Gap="3" AlignItems="AlignItems.Start">
                @if (_chairs is not null)
                {
                    @for (int i = 0; i < _chairs.Count; i++)
                    {
                        <RadzenTextBox Name="ChairtTitle" @bind-Value="@_chairs[i].ChairName" Placeholder="Chair name"/>
                        <RadzenButton Text="Remove chair" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Click="() => RemoveChair(i)" />
                    }

                }
                <RadzenButton Text="Add chair" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Click="() => AddChair()" />
            </RadzenStack>
        </RadzenCard>
        <RadzenCard>
          <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="3">
              <RadzenFormField Text="Note">
                  <RadzenTextArea Name="Note" @bind-Value="@faculty.Note" />
              </RadzenFormField>
          </RadzenStack>
        </RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start">
            <RadzenButton Text="@_btnText" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary"/>
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter]
    public int? id { get; set; }

    [SupplyParameterFromForm]
    Faculty faculty { get; set; } = new Faculty();

    private List<Chair>? _chairs = new List<Chair>();

    private string _btnText = String.Empty;

    protected override void OnInitialized()
    {
        _btnText = id == null ? "Create" : "Edit";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (id is not null)
        {
            var result = await FacultyService.GetFaculty((int)id);

            if (result is not null)
            {
                faculty = result;
                _chairs = result.Chairs;
            }
        }
    }

    private async Task HandleSubmit()
    {
        if (id is null)
        {
            foreach(var chair in _chairs)
            {
                if (chair.ChairName is not null)
                {
                    faculty.Chairs.Add(chair);
                }
            }
            var result = await FacultyService.CreateFaculty(faculty);

            if (result is not null)
                await OpenMessageDialog("Success", "Faculty successfully created");
            else 
                await OpenMessageDialog("Error", "Faculty not created");
        }
        else
        {
            foreach (var chair in _chairs)
            {
                if (chair.ChairName is not null)
                {
                    faculty.Chairs.Add(chair);
                }
            }
            var result = await FacultyService.UpdateFaculty((int)id, faculty);

            if (result is not null)
                await OpenMessageDialog("Success", "Faculty successfully updated");
            else
                await OpenMessageDialog("Error", "Faculty not updated");
        }
    }

    private async Task OpenMessageDialog(string headerTitle, string message) =>
        await DialogService.OpenAsync<MessageDialog>(headerTitle,
            new Dictionary<string, object> {
                { "message", message }
            },
            new DialogOptions() { Width = "300px", Height = "200px", Resizable = true, Draggable = true });

    private void AddChair()
    {
        _chairs.Add(new Chair());
    }

    private void RemoveChair(int index)
    {
        _chairs.RemoveAt(index);
    }
}
